export const translations = {
  en: {
    locale: 'en-US',
    // App.tsx
    appTitle: 'ComfyUI Workflow Generator',
    tabGenerator: 'Generator',
    tabTester: 'Tester',
    tabHistory: 'History',
    tabLocalLlm: 'Local LLM',
    tabDocumentation: 'Documentation',
    loadingStep1: 'Step 1/2: Generating workflow...',
    loadingStep2: 'Step 2/2: Validating workflow...',
    loadingComplete: 'Process complete!',
    loadingValidating: 'Validating workflow...',
    loadingDebugging: 'Debugging workflow...',
    toastWorkflowGenerated: 'Workflow generated and validated successfully!',
    toastUnknownError: 'An unknown error occurred.',
    toastInvalidWorkflowJson: 'Invalid workflow JSON provided.',
    toastWorkflowProcessed: 'Workflow processed successfully!',
    toastValidationError: 'An unknown error occurred during validation.',
    toastComfyUrlNotSet: 'ComfyUI API URL not set. Please configure it in settings.',
    toastWorkflowSent: 'Workflow sent to ComfyUI successfully!',
    toastHistoryLoaded: 'Loaded workflow from history.',
    toastWorkflowDownloaded: 'Workflow downloaded.',
    toastCopied: 'Workflow JSON copied to clipboard!',
    toastWorkflowPasted: 'Workflow copied! Go to your ComfyUI tab and press Ctrl+V to load it.',
    toastCopyFailed: 'Failed to copy workflow.',
    toastPromptOptimized: 'Prompt updated by Assistant!',
    toastWizardPromptGenerated: 'Prompt generated by Wizard!',
    toastSourceDownloaded: 'Source code downloaded successfully!',

    // InputPanel.tsx
    describeWorkflow: 'Describe Your Workflow',
    promptAssistant: 'Prompt Assistant',
    promptAssistantTitle: 'Start the AI assistant to improve your prompt',
    workflowWizard: 'Workflow Wizard',
    workflowWizardTitle: 'Start the wizard to build a technical prompt',
    describeWorkflowSubtext: 'Specify what you want to achieve. The more detailed your description, the better the generated workflow will be.',
    promptPlaceholder: 'e.g., Create a photorealistic image of a cat in space using an SDXL model...',
    tryExample: 'Or try an example:',
    generateWorkflow: 'Generate Workflow',

    // OutputPanel.tsx
    waitingForGeneration: 'Waiting for Generation',
    waitingForGenerationSubtext: 'Your generated ComfyUI workflow will appear here.',
    outputVisualizer: 'Visualizer',
    outputWorkflow: 'Workflow',
    outputRequirements: 'Requirements',
    outputLogs: 'Logs',
    tooltipValidate: 'Validate & Correct Workflow',
    tooltipRun: 'Run Workflow in ComfyUI',
    tooltipLoad: 'Load Workflow in ComfyUI (Copy & Paste)',
    tooltipCopy: 'Copy Workflow JSON',
    tooltipDownload: 'Download Workflow JSON',
    customNodes: 'Custom Nodes',
    noCustomNodes: 'No custom nodes required.',
    models: 'Models',
    noModels: 'No specific models required.',
    downloadLink: 'Download Link',
    installTo: 'Install to:',
    correctionAnalysis: 'Correction Analysis',
    analysis: 'Analysis:',
    action: 'Action:',
    reasoning: 'Reasoning:',

    // TesterPanel.tsx
    testerTitle: 'Validate & Correct Workflow',
    testerSubtext: 'Paste your workflow to check it. Optionally, provide an error message for a targeted fix.',
    testerWorkflowJsonLabel: 'Workflow JSON',
    testerWorkflowJsonPlaceholder: 'Paste your workflow JSON here...',
    testerErrorJsonEmpty: 'Workflow text field cannot be empty.',
    testerErrorJsonInvalid: 'Invalid Workflow JSON. Please check the syntax.',
    testerErrorLabel: 'ComfyUI Error Message (Optional)',
    testerErrorPlaceholder: 'Paste the error message from ComfyUI here...',
    testerButtonDebug: 'Debug',
    testerButtonValidate: 'Validate & Correct',

    // HistoryPanel.tsx
    noHistory: 'No History',
    noHistorySubtext: 'Generated workflows will appear here.',
    historyTitle: 'History',
    clearHistory: 'Clear History',
    tooltipClearHistory: 'Clear entire history',
    tooltipDownloadHistory: 'Download this workflow',

    // LocalLlmPanel.tsx
    localLlmTitle: 'Local LLM Management',
    localLlmRagTab: 'RAG / Knowledge Base',
    localLlmFineTuneTab: 'Fine-Tuning',
    localLlmRagSubtext: 'Upload .txt or .md files to populate your local LLM\'s knowledge base for Retrieval-Augmented Generation (RAG).',
    localLlmDropzone: 'Drag and drop files here, or click to select files.',
    localLlmUploading: 'Uploading...',
    localLlmUploadButton: 'Upload Selected Files',
    localLlmFineTuneSubtext: 'Add your training data (expected in JSONL format) to start a fine-tuning job on your local server.',
    localLlmStartingJob: 'Starting fine-tuning job...',
    localLlmJobStarted: (id: string) => `Job started with ID: ${id}`,
    localLlmWaitingForLogs: 'Waiting for server logs... (This feature is a demo)',
    localLlmError: 'Error',
    localLlmStarting: 'Starting...',
    localLlmStartFineTune: 'Start Fine-Tuning',
    localLlmApiUrlNotSet: 'Local LLM API URL is not configured in settings.',
    localLlmFileUploadSuccess: (name: string) => `File '${name}' uploaded successfully.`,
    localLlmFileUploadError: (name: string, error: string) => `Error uploading '${name}': ${error}`,
    localLlmTrainingDataEmpty: 'Training data cannot be empty.',
    localLlmJobStartSuccess: 'Fine-tuning job started successfully.',
    localLlmJobStartError: (error: string) => `Error starting fine-tuning: ${error}`,

    // PromptOptimizerModal.tsx
    optimizerErrorApiKey: 'Error: API key not configured.',
    optimizerErrorGeneral: 'Sorry, an error occurred.',
    optimizerErrorCommunication: 'Sorry, an error occurred while communicating.',
    optimizerPromptCreated: 'An optimized prompt has been created!',
    optimizerUsePrompt: 'Use Prompt and Close',
    optimizerPlaceholder: 'Your answer...',
    optimizerSend: 'Send',

    // WorkflowWizardModal.tsx
    wizardUsePrompt: 'Use Prompt and Close',
    wizardPromptCreated: 'A technical prompt has been created!',
    wizardPlaceholder: 'Your answer...',
    wizardSend: 'Send',

    // SettingsModal.tsx
    settingsTitle: 'Settings',
    settingsClose: 'Close settings',
    settingsComfyUrl: 'ComfyUI API URL',
    settingsComfyUrlHelp: 'Enter the base URL for your running ComfyUI instance. This is used for the "Run" functionality.',
    settingsLocalLlmUrl: 'Local LLM API URL',
    settingsLocalLlmUrlHelp: 'Enter the base URL for your local LLM server. This is used for RAG and Fine-tuning.',
    settingsSave: 'Save & Close',
    settingsDownloadSource: 'Download Source Code',
    settingsDownloadSourceHelp: 'Download all source files for this application bundled into a single .txt file.',

    // DocumentationPanel.tsx
    docLoading: 'Loading documentation...',
    docErrorTitle: 'Error',
    docErrorContent: (status: number) => `Could not load documentation (HTTP status ${status}).`,
    docErrorUnknown: 'An unknown error occurred.',
  },
  de: {
    locale: 'de-DE',
    // App.tsx
    appTitle: 'ComfyUI Workflow Generator',
    tabGenerator: 'Generator',
    tabTester: 'Tester',
    tabHistory: 'Verlauf',
    tabLocalLlm: 'Lokales LLM',
    tabDocumentation: 'Dokumentation',
    loadingStep1: 'Schritt 1/2: Generiere Workflow...',
    loadingStep2: 'Schritt 2/2: Validiere Workflow...',
    loadingComplete: 'Prozess abgeschlossen!',
    loadingValidating: 'Validiere Workflow...',
    loadingDebugging: 'Debuge Workflow...',
    toastWorkflowGenerated: 'Workflow erfolgreich generiert und validiert!',
    toastUnknownError: 'Ein unbekannter Fehler ist aufgetreten.',
    toastInvalidWorkflowJson: 'Ungültiges Workflow-JSON bereitgestellt.',
    toastWorkflowProcessed: 'Workflow erfolgreich verarbeitet!',
    toastValidationError: 'Während der Validierung ist ein unbekannter Fehler aufgetreten.',
    toastComfyUrlNotSet: 'ComfyUI API URL nicht in den Einstellungen festgelegt. Bitte konfigurieren.',
    toastWorkflowSent: 'Workflow erfolgreich an ComfyUI gesendet!',
    toastHistoryLoaded: 'Workflow aus dem Verlauf geladen.',
    toastWorkflowDownloaded: 'Workflow heruntergeladen.',
    toastCopied: 'Workflow-JSON in die Zwischenablage kopiert!',
    toastWorkflowPasted: 'Workflow kopiert! Gehen Sie zu Ihrem ComfyUI-Tab und drücken Sie Strg+V, um ihn zu laden.',
    toastCopyFailed: 'Kopieren des Workflows fehlgeschlagen.',
    toastPromptOptimized: 'Prompt vom Assistenten aktualisiert!',
    toastWizardPromptGenerated: 'Prompt vom Assistenten erstellt!',
    toastSourceDownloaded: 'Quellcode erfolgreich heruntergeladen!',
    
    // InputPanel.tsx
    describeWorkflow: 'Beschreiben Sie Ihren Workflow',
    promptAssistant: 'Prompt-Assistent',
    promptAssistantTitle: 'Starten Sie den KI-Assistenten, um Ihren Prompt zu verbessern',
    workflowWizard: 'Workflow-Assistent',
    workflowWizardTitle: 'Starten Sie den Assistenten, um einen technischen Prompt zu erstellen',
    describeWorkflowSubtext: 'Geben Sie an, was Sie erreichen möchten. Je detaillierter Ihre Beschreibung, desto besser wird der generierte Workflow sein.',
    promptPlaceholder: 'z.B. Erstelle ein fotorealistisches Bild einer Katze im Weltraum mit einem SDXL-Modell...',
    tryExample: 'Oder probieren Sie ein Beispiel:',
    generateWorkflow: 'Workflow generieren',

    // OutputPanel.tsx
    waitingForGeneration: 'Warte auf Generierung',
    waitingForGenerationSubtext: 'Ihr generierter ComfyUI-Workflow wird hier erscheinen.',
    outputVisualizer: 'Visualisierung',
    outputWorkflow: 'Workflow',
    outputRequirements: 'Anforderungen',
    outputLogs: 'Protokolle',
    tooltipValidate: 'Workflow validieren & korrigieren',
    tooltipRun: 'Workflow in ComfyUI ausführen',
    tooltipLoad: 'Workflow in ComfyUI laden (Kopieren & Einfügen)',
    tooltipCopy: 'Workflow-JSON kopieren',
    tooltipDownload: 'Workflow-JSON herunterladen',
    customNodes: 'Benutzerdefinierte Nodes',
    noCustomNodes: 'Keine benutzerdefinierten Nodes erforderlich.',
    models: 'Modelle',
    noModels: 'Keine spezifischen Modelle erforderlich.',
    downloadLink: 'Download-Link',
    installTo: 'Installieren nach:',
    correctionAnalysis: 'Korrekturanalyse',
    analysis: 'Analyse:',
    action: 'Aktion:',
    reasoning: 'Begründung:',

    // TesterPanel.tsx
    testerTitle: 'Workflow validieren & korrigieren',
    testerSubtext: 'Fügen Sie Ihren Workflow ein, um ihn zu überprüfen. Geben Sie optional eine Fehlermeldung an, um eine gezielte Korrektur zu erhalten.',
    testerWorkflowJsonLabel: 'Workflow JSON',
    testerWorkflowJsonPlaceholder: 'Fügen Sie hier Ihr Workflow-JSON ein...',
    testerErrorJsonEmpty: 'Workflow-Textfeld darf nicht leer sein.',
    testerErrorJsonInvalid: 'Ungültiges Workflow-JSON. Bitte überprüfen Sie die Syntax.',
    testerErrorLabel: 'ComfyUI Fehlermeldung (Optional)',
    testerErrorPlaceholder: 'Fügen Sie hier die von ComfyUI ausgegebene Fehlermeldung ein...',
    testerButtonDebug: 'Fehler beheben',
    testerButtonValidate: 'Validieren & korrigieren',

    // HistoryPanel.tsx
    noHistory: 'Kein Verlauf',
    noHistorySubtext: 'Generierte Workflows werden hier angezeigt.',
    historyTitle: 'Verlauf',
    clearHistory: 'Verlauf löschen',
    tooltipClearHistory: 'Gesamten Verlauf löschen',
    tooltipDownloadHistory: 'Diesen Workflow herunterladen',

    // LocalLlmPanel.tsx
    localLlmTitle: 'Lokales LLM Management',
    localLlmRagTab: 'RAG / Wissensdatenbank',
    localLlmFineTuneTab: 'Fine-Tuning',
    localLlmRagSubtext: 'Laden Sie .txt oder .md Dateien hoch, um die Wissensdatenbank Ihres lokalen LLMs für Retrieval-Augmented Generation (RAG) zu füllen.',
    localLlmDropzone: 'Dateien hierher ziehen oder klicken, um sie auszuwählen.',
    localLlmUploading: 'Lädt hoch...',
    localLlmUploadButton: 'Ausgewählte Dateien hochladen',
    localLlmFineTuneSubtext: 'Fügen Sie Ihre Trainingsdaten (im JSONL-Format erwartet) ein, um einen Fine-Tuning-Job auf Ihrem lokalen Server zu starten.',
    localLlmStartingJob: 'Starte Fine-Tuning-Job...',
    localLlmJobStarted: (id: string) => `Job gestartet mit ID: ${id}`,
    localLlmWaitingForLogs: 'Warte auf Server-Logs... (Diese Funktion ist eine Demo)',
    localLlmError: 'Fehler',
    localLlmStarting: 'Starte...',
    localLlmStartFineTune: 'Fine-Tuning starten',
    localLlmApiUrlNotSet: 'Lokale LLM API URL ist nicht in den Einstellungen konfiguriert.',
    localLlmFileUploadSuccess: (name: string) => `Datei '${name}' erfolgreich hochgeladen.`,
    localLlmFileUploadError: (name: string, error: string) => `Fehler beim Hochladen von '${name}': ${error}`,
    localLlmTrainingDataEmpty: 'Trainingsdaten dürfen nicht leer sein.',
    localLlmJobStartSuccess: 'Fine-Tuning-Job erfolgreich gestartet.',
    localLlmJobStartError: (error: string) => `Fehler beim Starten des Fine-Tuning: ${error}`,

    // PromptOptimizerModal.tsx
    optimizerErrorApiKey: 'Fehler: API-Schlüssel nicht konfiguriert.',
    optimizerErrorGeneral: 'Entschuldigung, es ist ein Fehler aufgetreten.',
    optimizerErrorCommunication: 'Entschuldigung, bei der Kommunikation ist ein Fehler aufgetreten.',
    optimizerPromptCreated: 'Ein optimierter Prompt wurde erstellt!',
    optimizerUsePrompt: 'Prompt übernehmen und schließen',
    optimizerPlaceholder: 'Ihre Antwort...',
    optimizerSend: 'Senden',

    // WorkflowWizardModal.tsx
    wizardUsePrompt: 'Prompt übernehmen und schließen',
    wizardPromptCreated: 'Ein technischer Prompt wurde erstellt!',
    wizardPlaceholder: 'Ihre Antwort...',
    wizardSend: 'Senden',
    
    // SettingsModal.tsx
    settingsTitle: 'Einstellungen',
    settingsClose: 'Einstellungen schließen',
    settingsComfyUrl: 'ComfyUI API URL',
    settingsComfyUrlHelp: 'Geben Sie die Basis-URL für Ihre laufende ComfyUI-Instanz ein. Dies wird für die "Run"-Funktionalität verwendet.',
    settingsLocalLlmUrl: 'Lokale LLM API URL',
    settingsLocalLlmUrlHelp: 'Geben Sie die Basis-URL für Ihren lokalen LLM-Server ein. Dies wird für RAG und Fine-Tuning verwendet.',
    settingsSave: 'Speichern & Schließen',
    settingsDownloadSource: 'Quellcode herunterladen',
    settingsDownloadSourceHelp: 'Laden Sie alle Quelldateien dieser Anwendung gebündelt in einer einzigen .txt-Datei herunter.',

    // DocumentationPanel.tsx
    docLoading: 'Dokumentation wird geladen...',
    docErrorTitle: 'Fehler',
    docErrorContent: (status: number) => `Dokumentation konnte nicht geladen werden (HTTP-Status ${status}).`,
    docErrorUnknown: 'Ein unbekannter Fehler ist aufgetreten.',
  }
};